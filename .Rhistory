comes_furnished == 0 ~ 'No',
comes_furnished > 0 ~ 'Yes'
)
)
furnished <- unique(df$comes_furnished)
radioButtons(inputId = "region_input",
label = "Select Region",
choices = unique(df$Region),
selected = unique(df$Region)[1])
sliderInput(inputId = "wine_input",
label = h3("Wine Consumption Range"),
min = min(df$Wine, na.rm = TRUE),
max = max(df$Wine, na.rm = TRUE),
value = c(min(df$Wine, na.rm = TRUE), max(df$Wine, na.rm = TRUE)))
# Radio buttons for selecting Region (since it is a factor, we don't use min or max)
radioButtons(inputId = "region_input",
label = "Select Region",
choices = unique(df$Region),  # Unique regions available
selected = unique(df$Region)[1])  # Default selection is the first region
# Slider for selecting the range of consumption (numeric variables)
sliderInput(inputId = "wine_input",
label = h3("Wine Consumption Range"),
min = min(df$Wine, na.rm = TRUE),  # Min value of Wine consumption
max = max(df$Wine, na.rm = TRUE),  # Max value of Wine consumption
value = c(min(df$Wine, na.rm = TRUE), max(df$Wine, na.rm = TRUE)))  # Default to full range
# For the factor variables (Region and Year), no need for min or max; use unique values
radioButtons(inputId = "region_input",
label = "Select Region",
choices = unique(df$Region),  # Get unique values of Region
selected = unique(df$Region)[1])  # Default selection is the first region
# For numeric variables (Wine, Beer, etc.), use min and max as usual
sliderInput(inputId = "wine_input",
label = h3("Wine Consumption Range"),
min = min(df$Wine, na.rm = TRUE),  # Min value of Wine consumption
max = max(df$Wine, na.rm = TRUE),  # Max value of Wine consumption
value = c(min(df$Wine, na.rm = TRUE), max(df$Wine, na.rm = TRUE)))  # Default to full range
# Ensure numeric conversion for the consumption variables
df$Wine <- as.numeric(as.character(df$Wine))   # Convert Wine to numeric if it's a factor
df$Beer <- as.numeric(as.character(df$Beer))   # Convert Beer to numeric if it's a factor
df$Vodka <- as.numeric(as.character(df$Vodka))   # Convert Vodka to numeric if it's a factor
df$Sparkling_wine <- as.numeric(as.character(df$Sparkling_wine))   # Convert Sparkling_wine to numeric if it's a factor
df$Brandy <- as.numeric(as.character(df$Brandy))   # Convert Brandy to numeric if it's a factor
df$Cider <- as.numeric(as.character(df$Cider))   # Convert Cider to numeric if it's a factor
df$Liqueurs <- as.numeric(as.character(df$Liqueurs))   # Convert Liqueurs to numeric if it's a factor
df$Consumption <- as.numeric(as.character(df$Consumption))   # Convert Consumption to numeric if it's a factor
# For Region and Year (which are factors), keep as unique values for selections
radioButtons(inputId = "region_input",
label = "Select Region",
choices = unique(df$Region),  # Get unique values of Region
selected = unique(df$Region)[1])  # Default selection is the first region
sliderInput(inputId = "wine_input",
label = h3("Wine Consumption Range"),
min = min(df$Wine, na.rm = TRUE),  # Min value of Wine consumption
max = max(df$Wine, na.rm = TRUE),  # Max value of Wine consumption
value = c(min(df$Wine, na.rm = TRUE), max(df$Wine, na.rm = TRUE)))  # Default to full range
sliderInput(inputId = "beer_input",
label = h3("Beer Consumption Range"),
min = min(df$Beer, na.rm = TRUE),  # Min value of Beer consumption
max = max(df$Beer, na.rm = TRUE),  # Max value of Beer consumption
value = c(min(df$Beer, na.rm = TRUE), max(df$Beer, na.rm = TRUE)))  # Default to full range
sliderInput(inputId = "vodka_input",
label = h3("Vodka Consumption Range"),
min = min(df$Vodka, na.rm = TRUE),  # Min value of Vodka consumption
max = max(df$Vodka, na.rm = TRUE),  # Max value of Vodka consumption
value = c(min(df$Vodka, na.rm = TRUE), max(df$Vodka, na.rm = TRUE)))  # Default to full range
sliderInput(inputId = "sparkling_wine_input",
label = h3("Sparkling Wine Consumption Range"),
min = min(df$Sparkling_wine, na.rm = TRUE),  # Min value of Sparkling Wine consumption
max = max(df$Sparkling_wine, na.rm = TRUE),  # Max value of Sparkling Wine consumption
value = c(min(df$Sparkling_wine, na.rm = TRUE), max(df$Sparkling_wine, na.rm = TRUE)))  # Default to full range
sliderInput(inputId = "brandy_input",
label = h3("Brandy Consumption Range"),
min = min(df$Brandy, na.rm = TRUE),  # Min value of Brandy consumption
max = max(df$Brandy, na.rm = TRUE),  # Max value of Brandy consumption
value = c(min(df$Brandy, na.rm = TRUE), max(df$Brandy, na.rm = TRUE)))  # Default to full range
sliderInput(inputId = "cider_input",
label = h3("Cider Consumption Range"),
min = min(df$Cider, na.rm = TRUE),  # Min value of Cider consumption
max = max(df$Cider, na.rm = TRUE),  # Max value of Cider consumption
value = c(min(df$Cider, na.rm = TRUE), max(df$Cider, na.rm = TRUE)))  # Default to full range
sliderInput(inputId = "liqueurs_input",
label = h3("Liqueurs Consumption Range"),
min = min(df$Liqueurs, na.rm = TRUE),  # Min value of Liqueurs consumption
max = max(df$Liqueurs, na.rm = TRUE),  # Max value of Liqueurs consumption
value = c(min(df$Liqueurs, na.rm = TRUE), max(df$Liqueurs, na.rm = TRUE)))  # Default to full range
# For Year (which is a factor), use checkboxGroupInput to let the user select multiple years
checkboxGroupInput(inputId = "year_input",
label = h3("Select Year"),
choices = unique(df$Year),  # The unique years available
inline = TRUE,
selected = unique(df$Year)[1])  # Default selection is the first year
df$Wine <- as.numeric(as.character(df$Wine))
df$Beer <- as.numeric(as.character(df$Beer))
df$Vodka <- as.numeric(as.character(df$Vodka))
df$Sparkling_wine <- as.numeric(as.character(df$Sparkling_wine))
df$Brandy <- as.numeric(as.character(df$Brandy))
df$Cider <- as.numeric(as.character(df$Cider))
df$Liqueurs <- as.numeric(as.character(df$Liqueurs))
df$Consumption <- as.numeric(as.character(df$Consumption))
radioButtons(inputId = "region_input",
label = "Select Region",
choices = unique(df$Region),
selected = unique(df$Region)[1])
sliderInput(inputId = "wine_input",
label = h3("Wine Consumption Range"),
min = min(df$Wine, na.rm = TRUE),
max = max(df$Wine, na.rm = TRUE),
value = c(min(df$Wine, na.rm = TRUE), max(df$Wine, na.rm = TRUE)))
sliderInput(inputId = "beer_input",
label = h3("Beer Consumption Range"),
min = min(df$Beer, na.rm = TRUE),
max = max(df$Beer, na.rm = TRUE),
value = c(min(df$Beer, na.rm = TRUE), max(df$Beer, na.rm = TRUE)))
sliderInput(inputId = "vodka_input",
label = h3("Vodka Consumption Range"),
min = min(df$Vodka, na.rm = TRUE),
max = max(df$Vodka, na.rm = TRUE),
value = c(min(df$Vodka, na.rm = TRUE), max(df$Vodka, na.rm = TRUE)))
sliderInput(inputId = "sparkling_wine_input",
label = h3("Sparkling Wine Consumption Range"),
min = min(df$Sparkling_wine, na.rm = TRUE),
max = max(df$Sparkling_wine, na.rm = TRUE),
value = c(min(df$Sparkling_wine, na.rm = TRUE), max(df$Sparkling_wine, na.rm = TRUE)))
sliderInput(inputId = "brandy_input",
label = h3("Brandy Consumption Range"),
min = min(df$Brandy, na.rm = TRUE),
max = max(df$Brandy, na.rm = TRUE),
value = c(min(df$Brandy, na.rm = TRUE), max(df$Brandy, na.rm = TRUE)))
sliderInput(inputId = "cider_input",
label = h3("Cider Consumption Range"),
min = min(df$Cider, na.rm = TRUE),
max = max(df$Cider, na.rm = TRUE),
value = c(min(df$Cider, na.rm = TRUE), max(df$Cider, na.rm = TRUE)))
sliderInput(inputId = "liqueurs_input",
label = h3("Liqueurs Consumption Range"),
min = min(df$Liqueurs, na.rm = TRUE),
max = max(df$Liqueurs, na.rm = TRUE),
value = c(min(df$Liqueurs, na.rm = TRUE), max(df$Liqueurs, na.rm = TRUE)))
checkboxGroupInput(inputId = "year_input",
label = h3("Select Year"),
choices = unique(df$Year),
inline = TRUE,
selected = unique(df$Year)[1])
renderPlotly({
p1 <- df %>%
filter(
Region == input$region_input,  # Filter by Region
Year %in% input$year_input,    # Filter by Year
Wine %in% input$wine_input,    # Filter by Wine (assuming consumption values are not the factor)
Beer %in% input$beer_input,    # You can add similar filters for other variables like Beer, Vodka, etc.
Vodka %in% input$vodka_input,
Sparkling_wine %in% input$sparkling_wine_input,
Brandy %in% input$brandy_input,
Cider %in% input$cider_input,
Liqueurs %in% input$liqueurs_input,
Consumption > input$consumption_input[1], Consumption < input$consumption_input[2]
) %>%
ggplot(aes(x = Consumption, color = Region)) +  # Consumption data on x-axis with Region for coloring
geom_density() +
labs(x = 'Consumption') +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Optional: to rotate x-axis labels
ggplotly(p1)
})
renderPlotly({
p1 <- df %>%
filter(
Region == input$region_input,
Year %in% input$year_input,
Wine %in% input$wine_input,
Beer %in% input$beer_input,
Vodka %in% input$vodka_input,
Sparkling_wine %in% input$sparkling_wine_input,
Brandy %in% input$brandy_input,
Cider %in% input$cider_input,
Liqueurs %in% input$liqueurs_input,
Consumption > input$consumption_input[1], Consumption < input$consumption_input[2]
) %>%
ggplot(aes(x = Consumption, color = Region)) +
geom_density() +
labs(x = 'Consumption') +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplotly(p1)
})
library(shiny)
checkboxGroupInput(inputId = "region_input",
label = h3("Region"),
choices = unique(df$Region),
inline = TRUE,
selected = unique(df$Region)[1])
img(src = "download.png", height = "200px", width = "200px")
renderPlotly({
p2 <- df %>%
filter(
Region == input$region_input,
Year %in% input$year_input,
Wine %in% input$wine_input,
Beer %in% input$beer_input,
Vodka %in% input$vodka_input,
Sparkling_wine %in% input$sparkling_wine_input,
Brandy %in% input$brandy_input,
Cider %in% input$cider_input,
Liqueurs %in% input$liqueurs_input,
Consumption > input$consumption_input[1],
Consumption < input$consumption_input[2]
) %>%
ggplot(aes(x = Region, fill = Region)) +
geom_bar() +
labs(x = "Region", y = "Count", title = "Count of Properties by Region") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplotly(p2)
})
renderPlotly({
p3 <- df %>%
filter(
type == input$type_input,
state %in% input$state_input,
laundry_options %in% input$laundry_input,
beds %in% input$beds_input,
baths %in% input$baths_input
) %>%
ggplot(aes(x = cats_allowed, fill=state)) +
geom_bar() +
labs(x = "Cats", y = "Count", title = "Count of Properties with Cats")
})
renderPlotly({
p3 <- df %>%
filter(
type == input$type_input,
state %in% input$state_input,
laundry_options %in% input$laundry_input,
beds %in% input$beds_input,
baths %in% input$baths_input
) %>%
ggplot(aes(x = Wine, fill=state)) +
geom_bar() +
labs(x = "Wine Type", y = "Count", title = "Count of Properties with Different Wine Types") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplotly(p3)
})
renderPlotly({
p4 <- df %>%
filter(
type == input$type_input,
state %in% input$state_input,
laundry_options %in% input$laundry_input,
beds %in% input$beds_input,
baths %in% input$baths_input
) %>%
ggplot(aes(x = Wine, fill=state)) +
geom_bar() +
labs(x = "Wine Type", y = "Count", title = "Count of Properties by Wine Type") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplotly(p4)
})
names(df)
renderPlotly({
p4 <- df %>%
filter(
Region %in% input$region_input,  # Filtering by Region
Year %in% input$year_input  # Filtering by Year
) %>%
ggplot(aes(x = Wine, fill = Region)) +  # You can replace 'Wine' with other variables like Beer, Vodka, etc.
geom_bar(position = "dodge") +  # Bars are positioned side-by-side for each Region
labs(x = "Wine Consumption", y = "Count", title = "Count of Wine Consumption by Region") +  # Custom labels
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for better readability
ggplotly(p4)  # Convert the plot to an interactive plot
})
names(df)
df <- read_csv('Consumption.csv')
df <- drop_na(df)
df$Region <- as.factor(df$Region)
unique_region <- unique(df$Region)
df$Year <- as.factor(df$Year)
unique_year <- unique(df$Year)
df$Wine <- as.factor(df$Wine)
unique_wine <- unique(df$Wine)
df$Beer <- as.factor(df$Beer)
unique_beer <- unique(df$Beer)
df$Vodka <- as.factor(df$Vodka)
unique_vodka <- unique(df$Vodka)
df$Sparkling_wine <- as.factor(df$Sparkling_wine)
unique_sparkling_wine <- unique(df$Sparkling_wine)
df$Brandy <- as.factor(df$Brandy)
unique_brandy <- unique(df$Brandy)
df$Cider <- as.factor(df$Cider)
unique_cider <- unique(df$Cider)
df$Liqueurs <- as.factor(df$Liqueurs)
unique_liqueurs <- unique(df$Liqueurs)
df$Consumption <- as.numeric(df$Consumption)
unique_consumption <- unique(df$Consumption)
Region <- unique(df$Region)
names(df)
# load data in 'global' chunk so it can be shared by all users of the dashboard
library(flexdashboard)
library(tidyverse)
library(plotly)
library(knitr)
library(DT)
library(lubridate)
library(shiny)
df <- read_csv('Consumption.csv')
library(dplyr)
library(tidyr)
df <- drop_na(df)
df$Region <- as.factor(df$Region)
unique_region <- unique(df$Region)
df$Year <- as.factor(df$Year)
unique_year <- unique(df$Year)
df$Wine <- as.numeric(df$Wine)
df$Beer <- as.numeric(df$Beer)
df$Vodka <- as.numeric(df$Vodka)
df$Sparkling_wine <- as.numeric(df$Sparkling_wine)
df$Brandy <- as.numeric(df$Brandy)
df$Cider <- as.numeric(df$Cider)
df$Liqueurs <- as.numeric(df$Liqueurs)
df$Consumption <- as.numeric(df$Consumption)
df <- df %>%
mutate(Total_Consumption = Wine + Beer + Vodka + Sparkling_wine + Brandy + Cider + Liqueurs)
unique_region <- unique(df$Region)
unique_year <- unique(df$Year)
library(shiny)
library(ggplot2)
library(dplyr)
library(tidyr)
library(plotly)
set.seed(123)
df <- data.frame(
Region = rep(paste("Region", 1:400), each = 10),
Year = rep(2010:2019, 400),
Wine = runif(4000, 20, 100),
Beer = runif(4000, 30, 150),
Vodka = runif(4000, 10, 80),
Sparkling_wine = runif(4000, 5, 50),
Brandy = runif(4000, 3, 30),
Cider = runif(4000, 2, 40),
Liqueurs = runif(4000, 1, 20),
Consumption = runif(4000, 100, 500)
)
ui <- fluidPage(
titlePanel("Alcohol Consumption Density Plot"),
sidebarLayout(
sidebarPanel(
selectizeInput("region_input", "Select Region",
choices = unique(df$Region),
selected = "Region 1",
multiple = FALSE,
options = list(
placeholder = 'Select Region...',
maxItems = 1,
selectOnTab = TRUE,
openOnFocus = TRUE
)),
selectInput("year_input", "Select Year", choices = unique(df$Year), selected = "2010"),
checkboxGroupInput("alcohol_input", "Select Alcohol Types",
choices = c("Wine", "Beer", "Vodka", "Sparkling_wine", "Brandy", "Cider", "Liqueurs"),
selected = c("Wine", "Beer"))
),
mainPanel(
tabsetPanel(
tabPanel("Density Plot", plotlyOutput("density_plot"))
)
)
)
)
server <- function(input, output) {
filtered_data <- reactive({
df %>%
filter(Region == input$region_input, Year == input$year_input)
})
output$density_plot <- renderPlotly({
data <- filtered_data()
alcohol_data <- data %>%
select(Year, Region, all_of(input$alcohol_input)) %>%
gather(key = "Alcohol_Type", value = "Consumption", -Year, -Region)
p1 <- ggplot(alcohol_data, aes(x = Consumption, fill = Alcohol_Type, color = Alcohol_Type)) +
geom_density(alpha = 0.4) +
labs(x = "Consumption (per year)",
title = paste("Density Plot of Alcohol Consumption in", input$region_input, "for", input$year_input)) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplotly(p1)
})
}
names(df)
renderPlotly({
p1 <- df %>%
filter(
Year == input$year_input,
Region %in% input$region_input
) %>%
ggplot(aes(x = Consumption, color = Region)) +
geom_density() +
labs(x = 'Consumption', y = 'Density', title = 'Density of Alcohol Consumption by Region') +  # Update labels
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplotly(p1)
})
renderPlotly({
p2 <- df %>%
filter(
Year == input$year_input,
Region %in% input$region_input
) %>%
ggplot(aes(x = Region, fill = Region)) +
geom_bar() +
labs(x = "Region", y = "Count of Consumption", title = "Count of Consumption by Region") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  #
ggplotly(p2)
})
renderPlotly({
median_wine <- median(df$Wine, na.rm = TRUE)
p3 <- df %>%
filter(
Year == input$year_input,
Region %in% input$region_input
) %>%
filter(Wine > median_wine) %>%
ggplot(aes(x = Region, fill = Region)) +
geom_bar() +
labs(x = "Region", y = "Count", ti# Update labels
theme(axis.text.x = element_text(angle = 45, hjust = 1))
renderPlotly({
# Calculate the median wine consumption
median_wine <- median(df$Wine, na.rm = TRUE)
p3 <- df %>%
filter(
Year == input$year_input,  # Filter by selected Year
Region %in% input$region_input  # Filter by selected Region(s)
) %>%
# Filter regions where Wine consumption is higher than the median
filter(Wine > median_wine) %>%
ggplot(aes(x = Region, fill = Region)) +  # Use Region on the x-axis and fill by Region
geom_bar() +  # Create a bar plot showing count of regions
labs(x = "Region", y = "Count", title = "Count of Regions with Higher-than-Median Wine Consumption") +  # Update labels
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate axis labels for better readability
ggplotly(p3)  # Convert ggplot to an interactive plot with Plotly
})
renderPlotly({
median_wine <- median(df$Wine, na.rm = TRUE)
p3 <- df %>%
filter(
Year == input$year_input,
Region %in% input$region_input
) %>%
filter(Wine > median_wine) %>%
ggplot(aes(x = Region, fill = Region)) +
geom_bar() +
labs(x = "Region", y = "Count", title = "Count of Regions with Higher-than-Median Wine Consumption") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplotly(p3)
})
renderPlotly({
# Calculate the median beer consumption
median_beer <- median(df$Beer, na.rm = TRUE)
p4 <- df %>%
filter(
Year == input$year_input,  # Filter by selected Year
Region %in% input$region_input  # Filter by selected Region(s)
) %>%
# Filter regions where Beer consumption is higher than the median
filter(Beer > median_beer) %>%
ggplot(aes(x = Region, fill = Region)) +  # Use Region on the x-axis and fill by Region
geom_bar() +  # Create a bar plot showing count of regions
labs(x = "Region", y = "Count", title = "Count of Regions with Higher-than-Median Beer Consumption") +  # Update labels
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate axis labels for better readability
# Use ggplotly to make the plot interactive
ggplotly(p4)  # Wrap the ggplot object in ggplotly to make it interactive
})
renderPlotly({
median_beer <- median(df$Beer, na.rm = TRUE)
p4 <- df %>%
filter(
Year == input$year_input,
Region %in% input$region_input
) %>%
filter(Beer > median_beer) %>%
ggplot(aes(x = Region, fill = Region)) +
geom_bar() +
labs(x = "Region", y = "Count", title = "Count of Regions with Higher-than-Median Beer Consumption") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplotly(p4)
})
renderPlotly({
# Calculate the average consumption
avg_consumption <- mean(df$Consumption, na.rm = TRUE)
p5 <- df %>%
filter(
Year == input$year_input,  # Filter by selected Year
Region %in% input$region_input  # Filter by selected Region(s)
) %>%
# Filter regions where Consumption is above the average
filter(Consumption > avg_consumption) %>%
ggplot(aes(x = Region, fill = Region)) +  # Use Region on the x-axis and fill by Region
geom_bar() +  # Create a bar plot showing the count of regions
labs(x = "Region", y = "Count", title = "Count of Regions with Above-Average Consumption") +  # Update labels
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate axis labels for better readability
# Convert the plot into an interactive plot using ggplotly
ggplotly(p5)  # Wrap the plot object in ggplotly to make it interactive
})
renderPlotly({
avg_consumption <- mean(df$Consumption, na.rm = TRUE)
p5 <- df %>%
filter(
Year == input$year_input,
Region %in% input$region_input
) %>%
filter(Consumption > avg_consumption) %>%
ggplot(aes(x = Region, fill = Region)) +
geom_bar() +
labs(x = "Region", y = "Count", title = "Count of Regions with Above-Average Consumption") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplotly(p5)
})
