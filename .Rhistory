cm <- confusionMatrix(data = pred, reference = df_test$target, positive = "pos")
cm$overall[1]
install.packages("bagFDA")
library('bagFDA')
install.packages("bagFDA")
library('bagFDA')
library('knn')
install.packages("knn")
library('knn')
library('caret')
df$age[is.na(df$age)] <- mean(df$age, na.rm = TRUE)
splitIndex <- createDataPartition(df$target, p = 0.70, list = FALSE)
df_train <- df[ splitIndex,]
df_test <- df[ -splitIndex,]
model1 <- train(target ~ ., data = df_train, method = "knn"
library('caret')
df$age[is.na(df$age)] <- mean(df$age, na.rm = TRUE)
splitIndex <- createDataPartition(df$target, p = 0.70, list = FALSE)
df_train <- df[ splitIndex,]
df_test <- df[ -splitIndex,]
model1 <- train(target ~ ., data = df_train, method = "knn",
preProcess = c("center", "scale"),
# Load necessary libraries
library(caret)
# Assuming `df` is your dataset and it's already loaded
# Handle missing values in the `age` column by replacing NAs with the column's mean
df$age[is.na(df$age)] <- mean(df$age, na.rm = TRUE)
# Create the data partition: 70% for training, 30% for testing
set.seed(123)  # Set seed for reproducibility
splitIndex <- createDataPartition(df$target, p = 0.70, list = FALSE)
# Split the data into training and testing sets
df_train <- df[splitIndex, ]
df_test <- df[-splitIndex, ]  # Use the complement of the split
# Train the KNN model using the training set
model1 <- train(target ~ ., data = df_train, method = "knn",
preProcess = c("center", "scale"),  # Optional: Preprocess features
tuneLength = 10)  # Tune the number of neighbors (k) using cross-validation
# Print the model summary
print(model1)
# You can now make predictions using the test set
predictions <- predict(model1, df_test)
# Evaluate model performance (e.g., accuracy for classification)
confusionMatrix(predictions, df_test$target)
library(caret)
df$age[is.na(df$age)] <- mean(df$age, na.rm = TRUE)
splitIndex <- createDataPartition(df$target, p = 0.70, list = FALSE)
df_train <- df[splitIndex, ]
df_test <- df[-splitIndex, ]
model1 <- train(target ~ ., data = df_train, method = "knn",
preProcess = c("center", "scale"),
tuneLength = 10)  # Tune the number of neighbors (k) using cross-validation
library(caret)
df$age[is.na(df$age)] <- mean(df$age, na.rm = TRUE)
splitIndex <- createDataPartition(df$target, p = 0.70, list = FALSE)
df_train <- df[splitIndex, ]
df_test <- df[-splitIndex, ]
model1 <- train(target ~ ., data = df_train, method = "knn",
preProcess = c("center", "scale")
library(caret)
df$age[is.na(df$age)] <- mean(df$age, na.rm = TRUE)
splitIndex <- createDataPartition(df$target, p = 0.70, list = FALSE)
df_train <- df[splitIndex, ]
df_test <- df[-splitIndex, ]
model1 <- train(target ~ ., data = df_train, method = "knn")
pred <- predict(model1, df_test)
cm <- confusionMatrix(data = pred, reference = df_test$target, positive = "pos")
cm$overall[1]
library('glmnet')
df$age[is.na(df$age)] = mean(df$age, na.rm = TRUE)
splitIndex <- createDataPartition(df$target, p = .70,
list = FALSE)
df_train <- df[ splitIndex,]
df_test <- df[ splitIndex,]
model1 <- train(target~., data=df_train,
method = "glmnet")
pred <- predict(model1, df_test)
cm <- confusionMatrix(data = pred, reference = df_test$target, positive = "pos")
cm$overall[1]
library('glmnet')
df$age[is.na(df$age)] = mean(df$age, na.rm = TRUE)
splitIndex <- createDataPartition(df$target, p = .70,
list = FALSE)
df_train <- df[ splitIndex,]
df_test <- df[ splitIndex,]
model1 <- train(target~., data=df_train,
method = "glmnet")
pred <- predict(model1, df_test)
cm <- confusionMatrix(data = pred, reference = df_test$target, positive = "pos")
cm$overall[1]
varImp(model1)
plot(varImp(model1))
knitr::opts_chunk$set(message = FALSE)
install.packages("rattle")
library(rattle)
fancyRpartPlot(tree_model)
library(rattle)
fancyRpartPlot(tree_model)
varImp(model1)
plot(varImp(model1))
library('ada')
df$age[is.na(df$age)] = mean(df$age, na.rm = TRUE)
splitIndex <- createDataPartition(df$target, p = .70,
list = FALSE)
df_train <- df[ splitIndex,]
df_test <- df[ splitIndex,]
model2 <- train(target~., data=df_train,
method = "ada")
pred <- predict(model1, df_test)
cm <- confusionMatrix(data = pred, reference = df_test$target, positive = "pos")
cm$overall[1]
library('ada')
df$age[is.na(df$age)] = mean(df$age, na.rm = TRUE)
splitIndex <- createDataPartition(df$target, p = .70,
list = FALSE)
df_train <- df[ splitIndex,]
df_test <- df[ splitIndex,]
model2 <- train(target~., data=df_train,
method = "ada")
varImp(model)
varImp(model2)
plot(varImp(model2))
varImp(model3)
plot(varImp(model3))
library('ada')
df$age[is.na(df$age)] = mean(df$age, na.rm = TRUE)
splitIndex <- createDataPartition(df$target, p = .70,
list = FALSE)
df_train <- df[ splitIndex,]
df_test <- df[ splitIndex,]
model3 <- train(target~., data=df_train,
method = "ada")
pred <- predict(model3, df_test)
cm <- confusionMatrix(data = pred, reference = df_test$target, positive = "pos")
cm$overall[1]
varImp(model3)
library(caret)
df$age[is.na(df$age)] <- mean(df$age, na.rm = TRUE)
splitIndex <- createDataPartition(df$target, p = 0.70, list = FALSE)
df_train <- df[splitIndex, ]
df_test <- df[-splitIndex, ]
model4 <- train(target ~ ., data = df_train, method = "knn")
pred <- predict(model4, df_test)
cm <- confusionMatrix(data = pred, reference = df_test$target, positive = "pos")
cm$overall[1]
varImp(model4)
plot(varImp(model2))
knitr::opts_chunk$set(message = FALSE)
library(mlbench)
library(tidyverse)
library(caret)
data(PimaIndiansDiabetes)
df <- tibble(PimaIndiansDiabetes)
df <- df %>% rename(target=diabetes)
df <- df %>%
mutate(target = as.factor(target))
splitIndex <- createDataPartition(df$target, p = .70,
list = FALSE)
df_train <- df[ splitIndex,]
df_test <- df[-splitIndex,]
library(randomForest)
getModelInfo('ranger')$ranger$parameters
trControl = trainControl(method = "cv",
number = 7)
tuneGrid = expand.grid(mtry = 2:4,
splitrule = c('gini', 'extratrees'),
min.node.size = c(1:10))
forest_ranger <- train(target~., data=df_train,
method = "ranger",
trControl = trControl,
tuneGrid = tuneGrid)
pred <- predict(forest_ranger, df_test)
cm <- confusionMatrix(data = pred, reference = df_test$target, positive = "pos")
cm$overall[1]
library('lda')
install.packages('lda')
library('lda')
tuneGrid = expand.grid(maxdepth = 2:10)
trControl = trainControl(method = "cv",
number = 7)
tree_approach2 <- train(target~., data=df_train,
method = "lda",
trControl = trControl)
pred <- predict(tree_approach2, df_test)
cm <- confusionMatrix(data = pred, reference = df_test$target, positive = "pos")
cm$overall[1]
trControl = trainControl(method = "cv",
number = 7)
dda <- train(target~., data=df_train,
method = "dda",
trControl = trControl)
library(mlbench)
library(tidyverse)
library(caret)
data(PimaIndiansDiabetes)
df <- tibble(PimaIndiansDiabetes)
df <- df %>% rename(target=diabetes)
df <- df %>%
mutate(target = as.factor(target))
splitIndex <- createDataPartition(df$target, p = .70,
list = FALSE)
df_train <- df[ splitIndex,]
df_test <- df[-splitIndex,]
library(randomForest)
getModelInfo('ranger')$ranger$parameters
trControl = trainControl(method = "cv",
number = 7)
tuneGrid = expand.grid(mtry = 2:4,
splitrule = c('gini', 'extratrees'),
min.node.size = c(1:10))
forest_ranger <- train(target~., data=df_train,
method = "ranger",
trControl = trControl,
tuneGrid = tuneGrid)
pred <- predict(forest_ranger, df_test)
cm <- confusionMatrix(data = pred, reference = df_test$target, positive = "pos")
cm$overall[1]
install.packages('lda')
library('lda')
tuneGrid = expand.grid(maxdepth = 2:10)
trControl = trainControl(method = "cv",
number = 7)
tree_approach2 <- train(target~., data=df_train,
method = "lda",
trControl = trControl)
pred <- predict(tree_approach2, df_test)
cm <- confusionMatrix(data = pred, reference = df_test$target, positive = "pos")
cm$overall[1]
trControl = trainControl(method = "cv",
number = 7)
dda <- train(target~., data=df_train,
method = "dda",
trControl = trControl)
trControl = trainControl(method = "cv",
number = 7)
fda <- train(target~., data=df_train,
method = "fda",
trControl = trControl)
ada <- train(target~., data=df_train,
method = "ada",
trControl = trControl)
results <- resamples(list('Fda' = fda,
'Ada'= ada))
bwplot(results)
pred <- predict(fda, df_test)
cm <- confusionMatrix(data = pred, reference = df_test$target, positive = "pos")
cm$overall[1]
pred <- predict(ada, df_test)
cm <- confusionMatrix(data = pred, reference = df_test$target, positive = "pos")
cm$overall[1]
trControl = trainControl(method = "cv",
number = 7)
mda <- train(target~., data=df_train,
method = "mda",
trControl = trControl)
ada <- train(target~., data=df_train,
method = "ada",
trControl = trControl)
results <- resamples(list('mda' = mda,
'Ada'= ada))
bwplot(results)
pred <- predict(mda, df_test)
cm <- confusionMatrix(data = pred, reference = df_test$target, positive = "pos")
cm$overall[1]
pred <- predict(ada, df_test)
cm <- confusionMatrix(data = pred, reference = df_test$target, positive = "pos")
cm$overall[1]
library(gganimate)
library(ggplot2)
library(tidyverse)
library(gganimate)
library(ggplot2)
library(tidyverse)
library(haven)
df <-read_sas('hdd0318cy.sas7bdat')
# find the number of rows of the data
n = nrow(df)
# subset 1000 rows of the data
df1 = df[sample(1:n, 1000), ]
# find the number of rows of the data
n = nrow(df)
# subset 1000 rows of the data
df1 = df[sample(1:n, 1000), ]
write_csv(df1, 'Midterm.csv')write_csv(df1, 'midterm.csv')
write_csv(df1, 'Midterm.csv')
write_csv(df1, 'midterm.csv')
df.to_csv('midterm.csv', index=False)
df1 <- df1 %>%
mutate(sex = case_when(
sex == 1 ~ "Male",
sex == 2 ~ "Female"
))
# find the number of rows of the data
n = nrow(df)
# subset 1000 rows of the data
df1 = df[sample(1:n, 1000), ]
# find the number of rows of the data
n = nrow(df)
# subset 1000 rows of the data
df1 = df[sample(1:n, 1000), ]
# find the number of rows of the data
n = nrow(df)
# subset 1000 rows of the data
df1 = df[sample(1:n, 1000), ]
# find the number of rows of the data
n = nrow(df)
# subset 1000 rows of the data
df1 = df[sample(1:n, 1000), ]
# find the number of rows of the data
n = nrow(df)
# subset 1000 rows of the data
df1 = df[sample(1:n, 1000), ]
library(gganimate)
library(ggplot2)
library(tidyverse)
library(haven)
df <-read_sas('hdd0318cy.sas7bdat')
raw_data=df
n=nrow(df)
print(raw_data)
# find the number of rows of the data
n = nrow(df)
# subset 1000 rows of the data
df1 = df[sample(1:n, 1000), ]
df1 = raw_data %>%
filter(yod==18)
write_csv(df1, 'midterm.csv')
df1 <- df1 %>%
mutate(sex = case_when(
sex == 1 ~ "Male",
sex == 2 ~ "Female"
))
df1 <- df1 %>%
mutate(provider = as.numeric(provider),
provider = case_when(
provider == 7201 ~ 'Newport',
provider == 7202 ~ 'St. Joseph Health Services of RI',
provider == 7203 ~ 'Memorial',
provider == 7204 ~ 'Miriam',
provider == 7205 ~ 'Rhode Island Hospital',
provider == 7206 ~ 'Roger Williams',
provider == 7209 ~ 'South County',
provider == 7210 ~ 'Kent County',
provider == 7211 ~ 'Westerly',
provider == 7212 ~ 'Rehab of RI',
provider == 7213 ~ 'Landmark Medical Center',
provider == 7214 ~ 'Women and Infants',
provider == 7215 ~ 'Bradley',
provider == 7216 ~ 'Butler',
))
df1$total <- as.numeric(df1$total)
df1$icu <- as.numeric(df1$icu)
df1 <- df1 %>%
mutate(race = as.numeric(race),
race = case_when(
race == 1 ~ 'White',
race == 2 ~ 'Black',
race == 3 ~ 'Asian',
race == 4 ~ 'American Indian',
race == 5 ~ 'Hispanic',
race == 6 ~ 'Other',
race == 9 ~ 'Unknown',
))
df1 <- df1 %>%
mutate(admtype = as.numeric(admtype),
admtype = case_when(
admtype == 1 ~ 'Emergency',
admtype == 2 ~ 'Urgent',
admtype == 3 ~ 'Electric',
admtype == 4 ~ 'Newborn',
admtype == 5 ~ 'Court Committal',
admtype == 9 ~ 'Information Not Availble',
))
na_count <- colSums(is.na(df1))
print(na_count)
df2 = drop_na(df1)
#Month of Admission = moa
#Month of Discharge = mod
df1 %>%
group_by(moa) %>%
count() %>%
arrange(desc(n))
df1 %>%
filter(sex == 'Male') %>%
group_by(moa) %>%
count(moa) %>%
arrange(-n)
df1 %>%
filter(sex == "Female", age >= 13, age <=19 ) %>%
group_by(moa) %>%
count(moa) %>%
arrange(-n)
df1 %>%
group_by(provider) %>%
filter(sex == 'Female', moa == '10')%>%
count(provider) %>%
arrange(-n)
df1 %>%
filter(sex == 'Female') %>%
summarise(female_age = mean(age))
df1 %>%
filter(sex == 'Male') %>%
summarise(male_age = mean(age))
df1 %>%
group_by(moa) %>%
summarise(average_age = mean(age)) %>%
arrange(-average_age)
df1 %>%
group_by(provider) %>%
summarise(total_charge = max(total)) %>%
arrange(desc(total_charge)) %>%
head(1)
df1 %>%
group_by(provider) %>%
filter(sex == 'Male', age >= 13, age <=19 ) %>%
summarise(least_total = min(total)) %>%
count(provider) %>%
arrange(-n)
df1 <- df1 %>%
mutate(season = case_when(
month(moa) %in% c(12, 1, 2) ~ "Winter",
month(moa) %in% c(3, 4, 5) ~ "Spring",
month(moa) %in% c(6, 7, 8) ~ "Summer",
month(moa) %in% c(9, 10, 11) ~ "Fall"
))
season_average <- df1 %>%
group_by(season) %>%
summarise(length_of_stay = mean(los)) %>%
arrange(desc(length_of_stay))
season_average %>%
filter(length_of_stay == max(length_of_stay))
df1 %>%
group_by(sex == 'Male') %>%
filter(age == 21, season == 'Fall', los == 1) %>%
summarise(total = mean(total))
df1 %>%
ggplot() +
geom_bar(mapping=aes(x = sex, fill = season),
position = 'dodge')+
labs(title = "Seasonal Admissions", x = "Sex", y = "Number of Admissions")
df1 %>%
ggplot() +
geom_point(aes(x = age, y = icu, color = sex)) +
labs(title = "Age vs. ICU Days", x = "Age", y = "ICU (Days)")
df1 %>%
ggplot() +
geom_bar(mapping=aes(x = race, fill = sex),
position = 'fill')+
labs(title = "Seasonal Admissions: Based on Race", x = "Season", y = "Number of Admissions")
df1 %>%
ggplot()+
geom_smooth(aes(x = los, y = total))+
labs(title = "Length of Stay vs. Total Charges", x = "Length of Stay", y = "Total Charges")
df1 %>%
ggplot() +
geom_point(aes(x = age, y = los, color = sex)) +
labs(title = "Age vs. Length of Stay", x = "Age", y = "Length of Stay (Days)")
df1 %>%
ggplot() +
geom_point(aes(x = age, y = total, color = sex)) +
labs(title = "Age vs. Total Charges", x = "Age", y = "Total Charges")
ggplot(df1, aes(x = provider)) +
geom_bar(fill = "grey", color = "black") +
labs(title = "Provider Frequency", x = "Provider", y = "Frequency")+
theme(axis.text.x = element_text(angle = 90, hjust = 1))
df1 %>%
ggplot() +
geom_bar(mapping=aes(x = admtype, fill = sex),
position = 'dodge')+
labs(title = "Admission Type per Sex", x = "Admission Type", y = "Number of Admissions")+
theme(axis.text.x = element_text(angle = 90, hjust = 1))
df1 %>%
ggplot(aes(x = age)) +
geom_histogram(binwidth = 5) +
labs(title = "Age Distribution by Race", x = "Age", y = "Count") +
facet_wrap(~race)
df1 %>%
ggplot(aes(x = season, y = los)) +
geom_boxplot(fill = "purple") +
labs(title = "Length of Stay by Season", x = "Season", y = "Length of Stay (Days)")
ggplot(df1, aes(x = provider)) +
geom_bar(fill = "orange", color = "brown") +
labs(title = "Provider Frequency", x = "Provider", y = "Frequency")+
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(df1, aes(x = provider)) +
geom_bar(fill = "purple", color = "blue") +
labs(title = "Provider Frequency", x = "Provider", y = "Frequency")+
theme(axis.text.x = element_text(angle = 90, hjust = 1))
df %>% ggplot(aes(x = Season, y = Number of Admissions, color = Race)) +
df %>% ggplot(aes(x = income, y = age, color = race)) +
geom_point() +
transition_states(sex)+
labs(title = 'Sex: {Adult Census Income}')
df %>% ggplot(aes(x = provider, y = age, color = race)) +
geom_point() +
transition_states(sex)+
labs(title = 'Sex: {Adult Census Income}')
df %>% ggplot(aes(x = provider, y = age, color = race)) +
geom_point() +
transition_states(sex)+
labs(title = 'Provider Plot')
#library(haven)
#df1 <-read_sas('hdd0318cy.sas7bdat')
total_charge <- median(df1$tot, na.rm = TRUE)
library(gganimate)
library(ggplot2)
library(tidyverse)
library(haven)
df <-read_sas('hdd0318cy.sas7bdat')
library(haven)
df <-read_sas('hdd0318cy.sas7bdat')
library(haven)
df <-read_sas('hdd0318cy.sas7bdat')
